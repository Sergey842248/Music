// Generated by view binder compiler. Do not edit!
package code.name.monkey.retromusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import code.name.monkey.retromusic.R;
import code.name.monkey.retromusic.views.BaselineGridTextView;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentArtistDetailsBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final AppBarLayout appBarLayout;

  @NonNull
  public final MaterialCardView artistCoverContainer;

  @NonNull
  public final BaselineGridTextView artistTitle;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final NestedScrollView container;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final NestedScrollView content;

  @NonNull
  public final FragmentArtistContentBinding fragmentArtistContent;

  @NonNull
  public final AppCompatImageView image;

  @NonNull
  public final BaselineGridTextView text;

  @NonNull
  public final MaterialToolbar toolbar;

  private FragmentArtistDetailsBinding(@NonNull View rootView, @Nullable AppBarLayout appBarLayout,
      @NonNull MaterialCardView artistCoverContainer, @NonNull BaselineGridTextView artistTitle,
      @Nullable NestedScrollView container, @Nullable NestedScrollView content,
      @NonNull FragmentArtistContentBinding fragmentArtistContent,
      @NonNull AppCompatImageView image, @NonNull BaselineGridTextView text,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.artistCoverContainer = artistCoverContainer;
    this.artistTitle = artistTitle;
    this.container = container;
    this.content = content;
    this.fragmentArtistContent = fragmentArtistContent;
    this.image = image;
    this.text = text;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentArtistDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentArtistDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_artist_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentArtistDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);

      id = R.id.artistCoverContainer;
      MaterialCardView artistCoverContainer = ViewBindings.findChildViewById(rootView, id);
      if (artistCoverContainer == null) {
        break missingId;
      }

      id = R.id.artistTitle;
      BaselineGridTextView artistTitle = ViewBindings.findChildViewById(rootView, id);
      if (artistTitle == null) {
        break missingId;
      }

      id = R.id.container;
      NestedScrollView container = ViewBindings.findChildViewById(rootView, id);

      id = R.id.content;
      NestedScrollView content = ViewBindings.findChildViewById(rootView, id);

      id = R.id.fragment_artist_content;
      View fragmentArtistContent = ViewBindings.findChildViewById(rootView, id);
      if (fragmentArtistContent == null) {
        break missingId;
      }
      FragmentArtistContentBinding binding_fragmentArtistContent = FragmentArtistContentBinding.bind(fragmentArtistContent);

      id = R.id.image;
      AppCompatImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.text;
      BaselineGridTextView text = ViewBindings.findChildViewById(rootView, id);
      if (text == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentArtistDetailsBinding(rootView, appBarLayout, artistCoverContainer,
          artistTitle, container, content, binding_fragmentArtistContent, image, text, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
